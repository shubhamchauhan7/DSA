bool isSafe(int x, int y, int row, int col, vector<vector<int>> &m, vector<vector<bool> > &visited)
    {
        if( ((x < row && x >= 0) && (y < col && y >= 0)) && (m[x][y] == 1) && (visited[x][y] == false))
            return true;
        return false;
    }
    
    void maze(vector<vector<int>> &m, int row, int col, int x, int y, vector<vector<bool> > &visited, vector<string> &path, string output)
    {
        if(x == row - 1 && y == col - 1)
            return path.push_back(output);
            
        if(isSafe(x + 1, y, row, col, m, visited))
        {
            visited[x + 1][y] = true;
            maze(m, row, col, x + 1, y, visited, path, output + 'D');
            visited[x + 1][y] = false;
        }
        
        if(isSafe(x, y - 1, row, col, m, visited))
        {
            visited[x][y - 1] = true;
            maze(m, row, col, x, y - 1, visited, path, output + 'L');
            visited[x][y - 1] = false;
        }
        
        if(isSafe(x, y + 1, row, col, m, visited))
        {
            visited[x][y + 1] = true;
            maze(m, row, col, x, y + 1, visited, path, output + 'R');
            visited[x][y + 1] = false;
        }
        
        if(isSafe(x - 1, y, row, col, m, visited))
        {
            visited[x - 1][y] = true;
            maze(m, row, col, x - 1, y, visited, path, output + 'U');
            visited[x - 1][y] = false;
        }
        
        return;
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) 
    {
        vector<string> path;
        
        if(m[0][0] == 0)
            return path;
        
        int row = n;
        int col = n;
        vector<vector<bool> > visited(row, vector<bool>(col, false));
        string output = "";
        
        visited[0][0] = true;
        
        maze(m, row, col, 0, 0, visited, path, output);
        
        return path;
        
    }
