int partition(int arr[], int start, int end)
{
  int pivotIndex = start;
  int pivot = arr[start];

  int count = 0;
  for(int i = start + 1; i <= end; i++)
  {
    if(arr[i] <= pivot)
      count++;
  }
  
  swap(arr[pivotIndex], arr[count + start]);
  pivotIndex = count + start;

  int i = start;
  int j = end;
  
  while(i < pivotIndex && j > pivotIndex)
  {
    while(arr[i] <= pivot)
      i++;
    while(arr[j] > pivot)
      j--;
    if(i < pivotIndex && j > pivotIndex)
      swap(arr[i], arr[j]);
  }
  
  return pivotIndex;
}

void quickSort(int arr[], int start, int end)
{
  if(start >= end)
    return;

  int index = partition(arr, start, end);

  quickSort(arr, start, index - 1);
  quickSort(arr, index + 1, end);
}

int main()
{
  int arr[] = {8, 1, 3, 4, 20, 50, 30};
  int n = 7;
  int start = 0;
  int end = n - 1;
  
  quickSort(arr, start, end);

  for(int i = 0; i < n; i++)
    cout<<arr[i]<<" ";
  cout<<endl;
}
