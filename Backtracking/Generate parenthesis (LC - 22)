//APPROACH 1 - FASTER AND EFFICIENT
void solve(int open, int close, string ans, vector<string> &output)
    {
        if(open > close)
            return;
        if(open == 0 && close == 0)
            return output.push_back(ans);

        if(open != 0)
            solve(open - 1, close, ans + '(', output);
        solve(open, close - 1, ans + ')', output);
        return;
    }


//APPROACH 2
void solve(vector<string> &ans, int open, int close, string output)
    {
        if(open == 0 && close == 0)
            return ans.push_back(output);

        if(open > 0)
        {
            output.push_back('(');
            solve(ans, open - 1, close, output);
            output.pop_back();
        }
        if(close > open)
        {
            output.push_back(')');
            solve(ans, open, close - 1, output);
            output.pop_back();
        }
        return;
    }

    vector<string> generateParenthesis(int n) 
    {
        vector<string> ans;
        int open = n;
        int close = n;
        string output = "";
        
        solve(open, close, ans, output);
        
        return ans;    
    }
