void solve(string &digits, int index, vector<string> &ans, string output, vector<string> &mapping)
    {
        if(index >= digits.length())
            return ans.push_back(output);

        int digit = digits[index] - '0';
        string temp = mapping[digit];
        for(int i = 0; i < temp.length(); i++)
        {
            char ch = temp[i];
            output.push_back(ch);
            solve(digits, index + 1, ans, output, mapping);
            output.pop_back();
        }
    }

    vector<string> letterCombinations(string digits) 
    {
        vector<string> ans;
        if(digits.length() == 0)
            return ans;
        int index = 0;
        string output = "";
        vector<string> mapping(10);
        mapping[2] = "abc";
        mapping[3] = "def";
        mapping[4] = "ghi";
        mapping[5] = "jkl";
        mapping[6] = "mno";
        mapping[7] = "pqrs";
        mapping[8] = "tuv";
        mapping[9] = "wxyz";

        solve(digits, index, ans, output, mapping);  

        return ans;  
    }
