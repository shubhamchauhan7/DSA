unordered_map<char, int> mp;

    bool correctOrder(string &s1, string &s2)
    {
        int n = min(s1.length(), s2.length());

        for(int i = 0; i < n; i++)
        {
            if(mp[s1[i]] < mp[s2[i]])
                return true;
            else if(mp[s1[i]] > mp[s2[i]])  
                return false;
        }

        if(s1.length() > s2.length() && (s1.find(s2) != string::npos))
            return false;
        return true;
    }

    bool isAlienSorted(vector<string>& words, string order) 
    {
        for(int i = 0; i < order.length(); i++)
            mp[order[i]] = i;

        for(int i = 0; i < words.size() - 1; i++)
        {
            if(!correctOrder(words[i], words[i + 1]))
                return false;
        }    

        return true;
    }
