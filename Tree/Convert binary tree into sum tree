//Check if sum tree or not

pair<bool, int> solve(Node* root)
    {
        if(root == NULL)
        {
            pair<bool, int> p = make_pair(true, 0);
            return p;
        }
        if(root->left == NULL && root->right == NULL)
        {
            pair<bool, int> p = make_pair(true, root->data);
            return p;
        }
        
        pair<bool, int>leftAns = solve(root->left);
        pair<bool, int>rightAns = solve(root->right);
        
        bool left = leftAns.first;
        bool right = rightAns.first;
        
        bool condn = root->data == leftAns.second + rightAns.second;
        
        pair<bool, int> ans;
        if(left && right && condn)
        {
            ans.first = true;
            ans.second = 2 * root->data;
        }
        else
            ans.first = false;
            
        return ans;
    }
    
    bool isSumTree(Node* root)
    {
        return solve(root).first;
    }


//Convert into sum tree

int solve(Node *root)
    {
      if(root == NULL)
            return 0;
            
        int leftSum = solve(root->left);
        int rightSum = solve(root->right);
        
        root->data = leftSum + root->data + rightSum;
        
        return root->data;    
    }
