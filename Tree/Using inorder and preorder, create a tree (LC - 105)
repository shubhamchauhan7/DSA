int findIndex(vector<int> &inorder, int size, int element)
    {
        for(int i = 0; i < size; i++)
        {
            if(element == inorder[i])
                return i;
        }
        return -1;
    }

    TreeNode* solve(vector<int>& preorder, vector<int>& inorder, int &size, int &preIndex, int inorderStart, int inorderEnd)
    {
        if(preIndex >= size || inorderStart > inorderEnd)
            return NULL;

        int element = preorder[preIndex++];
        TreeNode *root = new TreeNode(element);

        int pos = findIndex(inorder, size, element);

        root->left = solve(preorder, inorder, size, preIndex, inorderStart, pos - 1);
        root->right = solve(preorder, inorder, size, preIndex, pos + 1, inorderEnd);

        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
        int preIndex = 0;
        int size = preorder.size();
        int inorderStart = 0;
        int inorderEnd = size - 1;

        return solve(preorder, inorder, size, preIndex, inorderStart, inorderEnd);    
    }
