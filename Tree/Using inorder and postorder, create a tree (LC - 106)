int findIndex(vector<int> &inorder, int &element, int &size)
    {
        for(int i = 0; i < size; i++)
        {
            if(inorder[i] == element)
                return i;
        }
        return -1;
    }

    TreeNode* solve(vector<int>& inorder, vector<int>& postorder, int &size, int &postIndex, int inorderStart, int inorderEnd)
    {
        if(postIndex < 0 || inorderStart > inorderEnd)
            return NULL;

        int element = postorder[postIndex--];
        TreeNode* root = new TreeNode(element);

        int pos = findIndex(inorder, element, size);

        root->right = solve(inorder, postorder, size, postIndex, pos + 1, inorderEnd);
        root->left = solve(inorder, postorder, size, postIndex, inorderStart, pos - 1);

        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) 
    {
        int size = postorder.size();
        int postIndex = size - 1;
        int inorderStart = 0;
        int inorderEnd = size - 1;    

        return solve(inorder, postorder, size, postIndex, inorderStart, inorderEnd);
    }
