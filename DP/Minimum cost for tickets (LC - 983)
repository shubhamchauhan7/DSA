//Using BottomUp approach


//Using TopDown approach
int solveMem(vector<int>& days, vector<int>& costs, int index, vector<int> &dp)
    {
        if(index >= days.size())
            return 0;
        
        if(dp[index] != -1)
            return dp[index];

        int opt1 = costs[0] + solveMem(days, costs, index + 1, dp);

        int i;
        for(i = index;  i < days.size() && days[i] < days[index] + 7; i++);
        int opt2 = costs[1] + solveMem(days, costs, i, dp);

        for(i = index;  i < days.size() && days[i] < days[index] + 30; i++);
        int opt3 = costs[2] + solveMem(days, costs, i, dp);

        dp[index] = min(opt1, min(opt2, opt3));
        return dp[index];
    }

    int mincostTickets(vector<int>& days, vector<int>& costs) 
    {
        vector<int> dp(days.size() + 1, -1);
        return solveMem(days, costs, 0, dp);    
    }
