// Using Recursion

int fib(int n) 
    {
        if(n == 1 || n == 0)
            return n;

        return fib(n - 1) + fib(n - 2);
    }

// Using TOP-DOWN APPROACH

int topDown(int n, vector<int> &dp)
    {
        if(n == 1 || n == 0)
            return n;
        if(dp[n] != -1)
            return dp[n];

        dp[n] = topDown(n - 1, dp) + topDown(n - 2, dp);
        return dp[n];
    }

    int fib(int n) 
    {
        vector<int> dp(n + 1, -1);
        return topDown(n , dp);
    }

// Using BOTTOM-UP APPROACH

int bottomUp(int n)
    {
        vector<int> dp(n + 1, -1);

        dp[0] = 0;
        if(n == 0)
            return dp[0];
        dp[1] = 1;

        for(int i = 2; i <= n; i++)
            dp[i] = dp[i - 1] + dp[i - 2];
        
        return dp[n];
    }

    int fib(int n) 
    {
        return bottomUp(n);
    }

// Using SPACE OPTIMISATION

int spaceOpt(int n)
    {
        int prev2 = 0;
        int prev1 = 1;
        if(n == 0)
            return prev2;
        if(n == 1)
            return prev1;
        int curr;
        for(int i = 2; i <=n; i++)
        {
            curr = prev1 + prev2;
            prev2 = prev1;
            prev1 = curr;
        }
        return curr;
    }

    int fib(int n) 
    {
        return spaceOpt(n);
    }
