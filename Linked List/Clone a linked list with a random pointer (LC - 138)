//APPROACH 1
//TC - O(N), SC - O(N)

Node* copyRandomList(Node* head) 
    {
        if(head == NULL)
            return head;

        Node* cloneHead = NULL;
        Node* cloneTail = cloneHead;
        Node* curr = head;

        while(curr != NULL)
        {
            Node* newNode = new Node(curr->val);
            if(cloneHead == NULL)
            {
                cloneHead = newNode;
                cloneTail = cloneHead;
            }
            else
            {
                cloneTail->next = newNode;
                cloneTail = newNode;
            }
            curr = curr->next;
        } 

        unordered_map<Node*, Node*> mapped;
        Node* originalNode = head;
        Node* cloneNode = cloneHead;

        while(originalNode != NULL)
        {
            mapped[originalNode] = cloneNode;
            originalNode = originalNode->next;
            cloneNode = cloneNode->next;
        }

        originalNode = head;
        cloneNode = cloneHead;

        while(originalNode != NULL)
        {
            cloneNode->random = mapped[originalNode->random];
            originalNode = originalNode->next;
            cloneNode = cloneNode->next;
        }

        return cloneHead;
    }


//APPROACH 2
//TC - O(N), SC - O(1)

Node* copyRandomList(Node* head)
    {
        if(head == NULL)
            return head;

        Node* cloneHead = NULL;
        Node* cloneTail = cloneHead;
        Node* curr = head;

        while(curr != NULL)
        {
            Node* newNode = new Node(curr->val);
            if(cloneHead == NULL)
            {
                cloneHead = newNode;
                cloneTail = cloneHead;
            }
            else
            {
                cloneTail->next = newNode;
                cloneTail = newNode;
            }
            curr = curr->next;
        }

        Node* originalNode = head;
        Node* cloneNode = cloneHead;

        while(originalNode != NULL)
        {
            Node* forward = originalNode->next;
            originalNode->next = cloneNode;
            originalNode = forward;

            forward = cloneNode->next;
            cloneNode->next = originalNode;
            cloneNode = forward;
        }    

        curr = head;
        
        while(curr != NULL)
        {
            if(curr->next != NULL)
                curr->next->random = curr->random ? curr->random->next : curr->random; 
            curr = curr->next->next;
        }

        originalNode = head;
        cloneNode = cloneHead;

        while(originalNode != NULL)
        {
            originalNode->next = cloneNode->next;
            originalNode = originalNode->next;

            if(originalNode != NULL)
                cloneNode->next = originalNode->next;
            cloneNode = cloneNode->next;
        }

        return cloneHead;
    }
