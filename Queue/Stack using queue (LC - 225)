//APPROACH 1 - Using 1 queue

queue<int> q;

    MyStack() {
        
    }
    
    void push(int x) 
    {
        q.push(x);
        for(int i = 0; i < q.size() - 1; i++)
        {
            int ele = q.front();
            q.pop();
            q.push(ele);
        }        
    }
    
    int pop() 
    {
        int ele = q.front();
        q.pop();
        return ele;    
    }
    
    int top() 
    {
        return q.front();    
    }
    
    bool empty() 
    {
        return q.empty();    
    }

//APPROACH 2 - Using 2 queues

queue<int> q1;
    queue<int> q2;

    MyStack() {
        
    }
    
    void push(int x) 
    {
        q2.push(x);    
        
        while(!q1.empty())
        {
            q2.push(q1.front());
            q1.pop();
        }
        
        while(!q2.empty())
        {
            q1.push(q2.front());
            q2.pop();
        }
    }
    
    int pop() 
    {
        int ele = q1.front();
        q1.pop();
        return ele;    
    }
    
    int top() 
    {
        return q1.front();    
    }
    
    bool empty() 
    {
        return q1.empty();    
    }
