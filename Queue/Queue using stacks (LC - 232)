//APPROACH 1 - Making push operation O(N)

stack<int> s1;
    stack<int> s2;

    MyQueue() {
        
    }
    
    void push(int x) 
    {
        while(!s1.empty())
        {
            s2.push(s1.top());
            s1.pop();
        }
        s1.push(x);
        while(!s2.empty())
        {
            s1.push(s2.top());
            s2.pop();
        }
    }
    
    int pop() 
    {
        int ele = s1.top();
        s1.pop();
        return ele;    
    }
    
    int peek() 
    {
        return s1.top();    
    }
    
    bool empty() 
    {
        return s1.empty();    
    }

//APPROACH 2 - Making pop operation O(N)

stack<int> s1;
    stack<int> s2;
    MyQueue() {
        
    }
    
    void push(int x) 
    {
        s1.push(x);
    }
    
    int pop() 
    {
        int pop = -1;
        if(s2.empty())
        {
            while(!s1.empty())
            {
                s2.push(s1.top());
                s1.pop();
            }
        }
        pop = s2.top();
        s2.pop();
        return pop;
    }
    
    int peek() 
    {
        int front = -1;
        if(s2.empty())
        {
            while(!s1.empty())
            {
                s2.push(s1.top());
                s1.pop();
            }
        }
        front = s2.top();
        return front;    
    }
    
    bool empty() 
    {
        return s1.empty() && s2.empty();    
    }
